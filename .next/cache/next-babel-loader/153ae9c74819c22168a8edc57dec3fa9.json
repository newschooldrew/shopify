{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input:ScriptTagInput!){\n        scriptTagCreate(input:$input){\n            scriptTag{\n                id\n            }\n            userErrors{\n                field\n                message\n            }\n        }\n    }\n`;\nconst QUERY_SCRIPT_TAG = gql`\n    query{\n        scriptTags(first:5){\n            edges{\n                node{\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`;\nconst DELETE_SCRIPT_TAG = gql`\n    mutation scriptTagDelete($id:ID!){\n        scriptTagDelete(id:$id){\n            scriptTag (id:$id){\n                deletedScriptTagId\n                userErrors{\n                    field\n                    message\n                }\n            }\n        }\n    }\n`;\n\nconst ScriptPage = () => {\n  const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n  const {\n    loading,\n    err,\n    data\n  } = useQuery(QUERY_SCRIPT_TAG);\n  if (loading) return __jsx(\"div\", null, \"Loading\");\n  if (err) return __jsx(\"div\", null, error.message);\n  console.log(\"this is the script tag \" + data);\n  return __jsx(\"div\", null, \"current script tags\", __jsx(\"button\", {\n    type: \"submit\",\n    onClick: () => {\n      createScripts({\n        variables: {\n          input: {\n            src: \"https://8e93118a.ngrok.io/TestScript.js\",\n            displayScope: \"ALL\"\n          },\n          refetchQueries: [{\n            query: QUERY_SCRIPT_TAG\n          }]\n        }\n      });\n    }\n  }, \"Create Script tag\"), data.scriptTags.edges.map(tag => {\n    return __jsx(\"div\", {\n      key: tag.node.id\n    }, __jsx(\"p\", null, tag.node.id));\n  }));\n};\n\nexport default ScriptPage;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/shopify/pages/scriptPage.js"],"names":["gql","useQuery","useMutation","CREATE_SCRIPT_TAG","QUERY_SCRIPT_TAG","DELETE_SCRIPT_TAG","ScriptPage","createScripts","loading","err","data","error","message","console","log","variables","input","src","displayScope","refetchQueries","query","scriptTags","edges","map","tag","node","id"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAkBC,WAAlB,QAAqC,qBAArC;AAEA,MAAMC,iBAAiB,GAAGH,GAAI;;;;;;;;;;;;CAA9B;AAcA,MAAMI,gBAAgB,GAAGJ,GAAI;;;;;;;;;;;;CAA7B;AAcA,MAAMK,iBAAiB,GAAGL,GAAK;;;;;;;;;;;;CAA/B;;AAcA,MAAMM,UAAU,GAAG,MAAM;AACrB,QAAM,CAACC,aAAD,IAAkBL,WAAW,CAACC,iBAAD,CAAnC;AACA,QAAM;AAACK,IAAAA,OAAD;AAASC,IAAAA,GAAT;AAAcC,IAAAA;AAAd,MAAsBT,QAAQ,CAACG,gBAAD,CAApC;AAEA,MAAGI,OAAH,EAAY,OAAO,6BAAP;AACZ,MAAGC,GAAH,EAAQ,OAAO,mBAAME,KAAK,CAACC,OAAZ,CAAP;AACRC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BJ,IAAxC;AACA,SACI,0CAEI;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,OAAO,EAAE,MAAM;AAACH,MAAAA,aAAa,CAAC;AAC1BQ,QAAAA,SAAS,EAAC;AACNC,UAAAA,KAAK,EAAC;AACFC,YAAAA,GAAG,EAAC,yCADF;AAEFC,YAAAA,YAAY,EAAC;AAFX,WADA;AAIKC,UAAAA,cAAc,EAAC,CAAC;AAACC,YAAAA,KAAK,EAAChB;AAAP,WAAD;AAJpB;AADgB,OAAD,CAAb;AAQP;AAVb,yBAFJ,EAgBCM,IAAI,CAACW,UAAL,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BC,GAAG,IAAG;AAC7B,WACI;AAAK,MAAA,GAAG,EAAEA,GAAG,CAACC,IAAJ,CAASC;AAAnB,OACI,iBAAIF,GAAG,CAACC,IAAJ,CAASC,EAAb,CADJ,CADJ;AAKH,GANA,CAhBD,CADJ;AA0BH,CAjCD;;AAmCA,eAAepB,UAAf","sourcesContent":["import gql from 'graphql-tag'\nimport { useQuery,useMutation } from \"@apollo/react-hooks\";\n\nconst CREATE_SCRIPT_TAG = gql`\n    mutation scriptTagCreate($input:ScriptTagInput!){\n        scriptTagCreate(input:$input){\n            scriptTag{\n                id\n            }\n            userErrors{\n                field\n                message\n            }\n        }\n    }\n`\n\nconst QUERY_SCRIPT_TAG = gql`\n    query{\n        scriptTags(first:5){\n            edges{\n                node{\n                    id\n                    src\n                    displayScope\n                }\n            }\n        }\n    }\n`\n\nconst DELETE_SCRIPT_TAG = gql `\n    mutation scriptTagDelete($id:ID!){\n        scriptTagDelete(id:$id){\n            scriptTag (id:$id){\n                deletedScriptTagId\n                userErrors{\n                    field\n                    message\n                }\n            }\n        }\n    }\n`\n\nconst ScriptPage = () => {\n    const [createScripts] = useMutation(CREATE_SCRIPT_TAG)\n    const {loading,err, data} = useQuery(QUERY_SCRIPT_TAG);\n\n    if(loading) return <div>Loading</div>\n    if(err) return <div>{error.message}</div>\n    console.log(\"this is the script tag \" + data)\n    return (\n        <div>\n            current script tags\n            <button\n                type=\"submit\"\n                onClick={() => {createScripts({\n                    variables:{\n                        input:{\n                            src:\"https://8e93118a.ngrok.io/TestScript.js\", \n                            displayScope:\"ALL\"\n                                }, refetchQueries:[{query:QUERY_SCRIPT_TAG}]\n                            }\n                            })\n                        }}\n            >\n                Create Script tag\n            </button>\n        {data.scriptTags.edges.map(tag =>{\n            return(\n                <div key={tag.node.id}>\n                    <p>{tag.node.id}</p>\n                </div>\n            )\n        })}\n        </div>\n    )\n}\n\nexport default ScriptPage\n"]},"metadata":{},"sourceType":"module"}