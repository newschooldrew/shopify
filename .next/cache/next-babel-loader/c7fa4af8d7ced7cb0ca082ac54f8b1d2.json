{"ast":null,"code":"var __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nimport React from 'react';\nconst GET_PRODUCTS_BY_ID = gql`\n    query getProducts($ids:[ID!]!){\n    nodes(ids: $ids){\n      ... on Product{\n        title\n        handle\n        id\n        images(first:1){\n          edges{\n            node{\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first:1){\n          edges{\n            node{\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ProductList = () => {\n  const {\n    loading,\n    err,\n    data\n  } = useQuery(GET_PRODUCTS_BY_ID, {\n    variables: {\n      ids: store.get('ids')\n    }\n  });\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  if (err) return __jsx(\"div\", null, err.message);\n  console.log(\"this is the data \" + data.nodes.title);\n  return __jsx(\"div\", null, __jsx(Card, null, __jsx(ResourceList, {\n    showHeader: true,\n    resourceName: {\n      singular: \"Product\",\n      plural: \"Products\"\n    },\n    items: data.nodes,\n    renderItem: item => {\n      const media = __jsx(Thumbnail, {\n        source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n        alt: item.images.edges[0] ? item.images.edges[0].altText : ''\n      });\n\n      const price = item.variants.edges[0].node.price;\n      return __jsx(ResourceList.Item, {\n        id: item.id,\n        media: media,\n        accessibilityLabel: `View Details for ${item.title}`\n      }, __jsx(Stack, null, __jsx(Stack.Item, {\n        fill: true\n      }, __jsx(\"h3\", null, __jsx(TextStyle, {\n        variation: \"strong\"\n      }, item.title))), __jsx(Stack.Item, {\n        fill: true\n      }, __jsx(\"p\", null, item.price))));\n    }\n  }), data.nodes.map(product => __jsx(\"div\", {\n    key: product.id\n  }, product.title))));\n};\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/shopify/components/ProductList.js"],"names":["gql","useQuery","Card","ResourceList","Stack","TextStyle","Thumbnail","store","React","GET_PRODUCTS_BY_ID","ProductList","loading","err","data","variables","ids","get","message","console","log","nodes","title","singular","plural","item","media","images","edges","node","originalSrc","altText","price","variants","id","map","product"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,SAAQC,IAAR,EAAcC,YAAd,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,SAA9C,QAA8D,kBAA9D;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,kBAAkB,GAAGT,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;CAA/B;;AA4BA,MAAMU,WAAW,GAAG,MAAM;AACtB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,GAAV;AAAeC,IAAAA;AAAf,MAAwBZ,QAAQ,CAACQ,kBAAD,EAAoB;AAACK,IAAAA,SAAS,EAAC;AAACC,MAAAA,GAAG,EAACR,KAAK,CAACS,GAAN,CAAU,KAAV;AAAL;AAAX,GAApB,CAAtC;AACA,MAAGL,OAAH,EAAY,OAAO,gCAAP;AACZ,MAAIC,GAAJ,EAAS,OAAO,mBAAMA,GAAG,CAACK,OAAV,CAAP;AACTC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBN,IAAI,CAACO,KAAL,CAAWC,KAA7C;AACA,SACA,mBACI,MAAC,IAAD,QACI,MAAC,YAAD;AACI,IAAA,UAAU,MADd;AAEI,IAAA,YAAY,EAAE;AAACC,MAAAA,QAAQ,EAAC,SAAV;AAAoBC,MAAAA,MAAM,EAAC;AAA3B,KAFlB;AAGI,IAAA,KAAK,EAAEV,IAAI,CAACO,KAHhB;AAII,IAAA,UAAU,EAAEI,IAAI,IAAI;AAChB,YAAMC,KAAK,GACP,MAAC,SAAD;AACI,QAAA,MAAM,EACFD,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBC,IAArB,CAA0BC,WAAjD,GAA+D,EAFvE;AAII,QAAA,GAAG,EAAEL,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBG,OAA5C,GAAsD;AAJ/D,QADJ;;AAQA,YAAMC,KAAK,GAAGP,IAAI,CAACQ,QAAL,CAAcL,KAAd,CAAoB,CAApB,EAAuBC,IAAvB,CAA4BG,KAA1C;AACA,aACI,MAAC,YAAD,CAAc,IAAd;AACI,QAAA,EAAE,EAAEP,IAAI,CAACS,EADb;AAEI,QAAA,KAAK,EAAER,KAFX;AAGI,QAAA,kBAAkB,EAAG,oBAAmBD,IAAI,CAACH,KAAM;AAHvD,SAKA,MAAC,KAAD,QACI,MAAC,KAAD,CAAO,IAAP;AAAY,QAAA,IAAI;AAAhB,SACI,kBACI,MAAC,SAAD;AAAW,QAAA,SAAS,EAAC;AAArB,SACKG,IAAI,CAACH,KADV,CADJ,CADJ,CADJ,EAQI,MAAC,KAAD,CAAO,IAAP;AAAY,QAAA,IAAI;AAAhB,SACI,iBACCG,IAAI,CAACO,KADN,CADJ,CARJ,CALA,CADJ;AAsBH;AApCL,IADJ,EAuCKlB,IAAI,CAACO,KAAL,CAAWc,GAAX,CAAeC,OAAO,IACnB;AAAK,IAAA,GAAG,EAAEA,OAAO,CAACF;AAAlB,KAAuBE,OAAO,CAACd,KAA/B,CADH,CAvCL,CADJ,CADA;AA+CC,CApDL;;AAuDA,eAAeX,WAAf","sourcesContent":["import gql from 'graphql-tag'\nimport {useQuery} from '@apollo/react-hooks'\nimport {Card, ResourceList, Stack, TextStyle, Thumbnail} from '@shopify/polaris'\nimport store from 'store-js'\nimport React from 'react'\n\nconst GET_PRODUCTS_BY_ID = gql`\n    query getProducts($ids:[ID!]!){\n    nodes(ids: $ids){\n      ... on Product{\n        title\n        handle\n        id\n        images(first:1){\n          edges{\n            node{\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first:1){\n          edges{\n            node{\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst ProductList = () => {\n    const {loading, err, data } = useQuery(GET_PRODUCTS_BY_ID,{variables:{ids:store.get('ids')}});\n    if(loading) return <div>Loading...</div>\n    if (err) return <div>{err.message}</div>\n    console.log(\"this is the data \" + data.nodes.title)\n    return (\n    <div>\n        <Card>\n            <ResourceList \n                showHeader\n                resourceName={{singular:\"Product\",plural:\"Products\"}}\n                items={data.nodes}\n                renderItem={item => {\n                    const media = (\n                        <Thumbnail \n                            source={\n                                item.images.edges[0] ? item.images.edges[0].node.originalSrc : ''\n                            }\n                            alt={item.images.edges[0] ? item.images.edges[0].altText : ''}\n                        />\n                    )\n                    const price = item.variants.edges[0].node.price;\n                    return(\n                        <ResourceList.Item \n                            id={item.id}\n                            media={media}\n                            accessibilityLabel={`View Details for ${item.title}`}\n                        >\n                        <Stack>\n                            <Stack.Item fill>\n                                <h3>\n                                    <TextStyle variation='strong'>\n                                        {item.title}\n                                    </TextStyle>\n                                </h3>\n                            </Stack.Item>\n                            <Stack.Item fill>\n                                <p>\n                                {item.price}\n                                </p>\n                            </Stack.Item>\n                        </Stack>\n                    </ResourceList.Item>\n                    )\n                }}\n            />\n            {data.nodes.map(product =>(\n                <div key={product.id}>{product.title}</div>\n            ))}\n        </Card>\n    </div>  \n    )\n    }\n\n\nexport default ProductList\n"]},"metadata":{},"sourceType":"module"}