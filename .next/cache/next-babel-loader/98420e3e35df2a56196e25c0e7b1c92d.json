{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query getProducts($ids:[ID!]!){\\n    nodes(ids: $ids){\\n      ... on Product{\\n        title\\n        handle\\n        id\\n        images(first:1){\\n          edges{\\n            node{\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n        variants(first:1){\\n          edges{\\n            node{\\n              price\\n              id\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nimport React from 'react';\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\n\nvar ProductList = function ProductList() {\n  _s();\n\n  var _useQuery = useQuery(GET_PRODUCTS_BY_ID, {\n    variables: {\n      ids: store.get('ids')\n    }\n  }),\n      loading = _useQuery.loading,\n      err = _useQuery.err,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  if (err) return __jsx(\"div\", null, err.message);\n  console.log(\"this is the data \" + data.nodes.title);\n  return __jsx(\"div\", null, __jsx(Card, null, __jsx(ResourceList, {\n    showHeader: true,\n    resourceName: {\n      singular: \"Product\",\n      plural: \"Products\"\n    },\n    items: data.nodes,\n    renderItem: function renderItem(item) {\n      var media = __jsx(Thumbnail, {\n        source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n        alt: item.images.edges[0] ? item.images.edges[0].altText : ''\n      });\n\n      var price = item.variants.edges[0].node.price;\n      return __jsx(ResourceList.Item, {\n        id: item.id,\n        media: media,\n        accessibilityLabel: \"View Details for \".concat(item.title)\n      });\n    }\n  }), data.nodes.map(function (product) {\n    return __jsx(\"div\", {\n      key: product.id\n    }, product.title);\n  })));\n};\n\n_s(ProductList, \"GIZZuPEePE8Az/4g2zofC8j7L+8=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductList;\nexport default ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/shopify/components/ProductList.js"],"names":["gql","useQuery","Card","ResourceList","Stack","TextStyle","Thumbnail","store","React","GET_PRODUCTS_BY_ID","ProductList","variables","ids","get","loading","err","data","message","console","log","nodes","title","singular","plural","item","media","images","edges","node","originalSrc","altText","price","variants","id","map","product"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,SAAQC,IAAR,EAAcC,YAAd,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,SAA9C,QAA8D,kBAA9D;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,kBAAkB,GAAGT,GAAH,mBAAxB;;AA4BA,IAAMU,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AAAA,kBACQT,QAAQ,CAACQ,kBAAD,EAAoB;AAACE,IAAAA,SAAS,EAAC;AAACC,MAAAA,GAAG,EAACL,KAAK,CAACM,GAAN,CAAU,KAAV;AAAL;AAAX,GAApB,CADhB;AAAA,MACfC,OADe,aACfA,OADe;AAAA,MACNC,GADM,aACNA,GADM;AAAA,MACDC,IADC,aACDA,IADC;;AAEtB,MAAGF,OAAH,EAAY,OAAO,gCAAP;AACZ,MAAIC,GAAJ,EAAS,OAAO,mBAAMA,GAAG,CAACE,OAAV,CAAP;AACTC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBH,IAAI,CAACI,KAAL,CAAWC,KAA7C;AACA,SACA,mBACI,MAAC,IAAD,QACI,MAAC,YAAD;AACI,IAAA,UAAU,MADd;AAEI,IAAA,YAAY,EAAE;AAACC,MAAAA,QAAQ,EAAC,SAAV;AAAoBC,MAAAA,MAAM,EAAC;AAA3B,KAFlB;AAGI,IAAA,KAAK,EAAEP,IAAI,CAACI,KAHhB;AAII,IAAA,UAAU,EAAE,oBAAAI,IAAI,EAAI;AAChB,UAAMC,KAAK,GACP,MAAC,SAAD;AACI,QAAA,MAAM,EACFD,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBC,IAArB,CAA0BC,WAAjD,GAA+D,EAFvE;AAII,QAAA,GAAG,EAAEL,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBG,OAA5C,GAAsD;AAJ/D,QADJ;;AAQA,UAAMC,KAAK,GAAGP,IAAI,CAACQ,QAAL,CAAcL,KAAd,CAAoB,CAApB,EAAuBC,IAAvB,CAA4BG,KAA1C;AACA,aACI,MAAC,YAAD,CAAc,IAAd;AACI,QAAA,EAAE,EAAEP,IAAI,CAACS,EADb;AAEI,QAAA,KAAK,EAAER,KAFX;AAGI,QAAA,kBAAkB,6BAAsBD,IAAI,CAACH,KAA3B;AAHtB,QADJ;AAOH;AArBL,IADJ,EAwBKL,IAAI,CAACI,KAAL,CAAWc,GAAX,CAAe,UAAAC,OAAO;AAAA,WACnB;AAAK,MAAA,GAAG,EAAEA,OAAO,CAACF;AAAlB,OAAuBE,OAAO,CAACd,KAA/B,CADmB;AAAA,GAAtB,CAxBL,CADJ,CADA;AAgCC,CArCL;;GAAMX,W;UAC4BT,Q;;;KAD5BS,W;AAwCN,eAAeA,WAAf","sourcesContent":["import gql from 'graphql-tag'\nimport {useQuery} from '@apollo/react-hooks'\nimport {Card, ResourceList, Stack, TextStyle, Thumbnail} from '@shopify/polaris'\nimport store from 'store-js'\nimport React from 'react'\n\nconst GET_PRODUCTS_BY_ID = gql`\n    query getProducts($ids:[ID!]!){\n    nodes(ids: $ids){\n      ... on Product{\n        title\n        handle\n        id\n        images(first:1){\n          edges{\n            node{\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first:1){\n          edges{\n            node{\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst ProductList = () => {\n    const {loading, err, data } = useQuery(GET_PRODUCTS_BY_ID,{variables:{ids:store.get('ids')}});\n    if(loading) return <div>Loading...</div>\n    if (err) return <div>{err.message}</div>\n    console.log(\"this is the data \" + data.nodes.title)\n    return (\n    <div>\n        <Card>\n            <ResourceList \n                showHeader\n                resourceName={{singular:\"Product\",plural:\"Products\"}}\n                items={data.nodes}\n                renderItem={item => {\n                    const media = (\n                        <Thumbnail \n                            source={\n                                item.images.edges[0] ? item.images.edges[0].node.originalSrc : ''\n                            }\n                            alt={item.images.edges[0] ? item.images.edges[0].altText : ''}\n                        />\n                    )\n                    const price = item.variants.edges[0].node.price;\n                    return(\n                        <ResourceList.Item \n                            id={item.id}\n                            media={media}\n                            accessibilityLabel={`View Details for ${item.title}`}\n                        />\n                    )\n                }}\n            />\n            {data.nodes.map(product =>(\n                <div key={product.id}>{product.title}</div>\n            ))}\n        </Card>\n    </div>  \n    )\n    }\n\n\nexport default ProductList\n"]},"metadata":{},"sourceType":"module"}